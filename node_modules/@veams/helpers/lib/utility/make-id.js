'use strict';
exports.__esModule = true;
// Adapted from https://github.com/broofa/node-uuid/
// Under MIT License
// tslint:disable:no-bitwise
/**
 * Fallback function with Math.random
 */
function getRandomFromMathRandom() {
    var result = new Array(16);
    var r = 0;
    for (var i = 0; i < 16; i++) {
        if ((i & 0x03) === 0) {
            r = Math.random() * 0x100000000;
        }
        result[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }
    return result;
}
/**
 * Execute crypto or fallback function
 */
function getRandomFunction() {
    // tslint:disable-next-line:no-string-literal
    var browserCrypto = window.crypto || window["msCrypto"];
    if (browserCrypto && browserCrypto.getRandomValues) {
        // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
        //
        // Moderately fast, high quality
        try {
            return function getRandomFromCryptoRandom() {
                var result = new Uint8Array(16);
                browserCrypto.getRandomValues(result);
                return result;
            };
        }
        catch (e) {
        }
    }
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    return getRandomFromMathRandom;
}
var getRandom = getRandomFunction();
/**
 * Mapping
 */
var ByteHexMappings = /** @class */ (function () {
    function ByteHexMappings() {
        this.byteToHex = [];
        this.hexToByte = {};
        for (var i = 0; i < 256; i++) {
            this.byteToHex[i] = (i + 0x100).toString(16).substr(1);
            this.hexToByte[this.byteToHex[i]] = i;
        }
    }
    return ByteHexMappings;
}());
var byteHexMappings = new ByteHexMappings();
function getUuidV4() {
    return getRandom();
}
exports.getUuidV4 = getUuidV4;
/**
 * Return string of unique id
 */
function uuidToString(buf, offset) {
    if (offset === void 0) { offset = 0; }
    var i = offset;
    var bth = byteHexMappings.byteToHex;
    return bth[buf[i++]] + bth[buf[i++]] +
        bth[buf[i++]] + bth[buf[i++]] + "-" +
        bth[buf[i++]] + bth[buf[i++]] + "-" +
        bth[buf[i++]] + bth[buf[i++]] + "-" +
        bth[buf[i++]] + bth[buf[i++]] + "-" +
        bth[buf[i++]] + bth[buf[i++]] +
        bth[buf[i++]] + bth[buf[i++]] +
        bth[buf[i++]] + bth[buf[i++]];
}
exports.uuidToString = uuidToString;
function getUuidV4String() {
    return uuidToString(getUuidV4());
}
exports.getUuidV4String = getUuidV4String;
/**
 * Generates numeric id.
 *
 * @return {String} - generated id
 */
function makeId() {
    return getUuidV4String();
}
exports["default"] = makeId;
;
