'use strict';
exports.__esModule = true;
/**
 * Detect swipe gestures
 *
 * @param {Object} el - element to detect swipes on
 * @param {Number} threshold - threshold for swipe (in px)
 */
function detectSwipe(el, threshold) {
    if (threshold === void 0) { threshold = 0; }
    var touchstartX = 0;
    var touchstartY = 0;
    var touchendX = 0;
    var touchendY = 0;
    var swipeThreshold = threshold;
    function handleSwipe() {
        var deltaX = Math.abs(touchstartX - touchendX);
        var deltaY = Math.abs(touchstartY - touchendY);
        if (deltaX > swipeThreshold) {
            if (touchendX < touchstartX) {
                el.dispatchEvent(new CustomEvent('swipe', {
                    detail: {
                        direction: 'left'
                    }
                }));
            }
            if (touchendX > touchstartX) {
                el.dispatchEvent(new CustomEvent('swipe', {
                    detail: {
                        direction: 'right'
                    }
                }));
            }
        }
        if (deltaY > swipeThreshold) {
            if (touchendY < touchstartY) {
                el.dispatchEvent(new CustomEvent('swipe', {
                    detail: {
                        direction: 'up'
                    }
                }));
            }
            if (touchendY > touchstartY) {
                el.dispatchEvent(new CustomEvent('swipe', {
                    detail: {
                        direction: 'down'
                    }
                }));
            }
        }
    }
    el.addEventListener('touchstart', function (e) {
        touchstartX = e.touches[0].clientX;
        touchstartY = e.touches[0].clientY;
    }, false);
    el.addEventListener('touchend', function (e) {
        touchendX = e.changedTouches[0].clientX;
        touchendY = e.changedTouches[0].clientY;
        handleSwipe();
    }, false);
}
exports["default"] = detectSwipe;
;
